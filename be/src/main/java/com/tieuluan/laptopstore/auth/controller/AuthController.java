package com.tieuluan.laptopstore.auth.controller;

import com.tieuluan.laptopstore.auth.services.EmailService;
import com.tieuluan.laptopstore.auth.config.JWTTokenHelper;
import com.tieuluan.laptopstore.auth.dto.CodeResponse;
import com.tieuluan.laptopstore.auth.dto.LoginRequest;
import com.tieuluan.laptopstore.auth.dto.RegistrationRequest;
import com.tieuluan.laptopstore.auth.dto.ForgotPassword.ForgotPasswordRequest;
import com.tieuluan.laptopstore.auth.dto.ForgotPassword.ResendOtp;
import com.tieuluan.laptopstore.auth.dto.ForgotPassword.ResetPasswordRequest;
import com.tieuluan.laptopstore.auth.dto.ForgotPassword.VerifyOtpForgotPassword;
import com.tieuluan.laptopstore.auth.dto.User.UserToken;
import com.tieuluan.laptopstore.auth.entities.User;
import com.tieuluan.laptopstore.auth.repositories.UserDetailRepository;
import com.tieuluan.laptopstore.auth.services.OtpService;
import com.tieuluan.laptopstore.auth.services.RegistrationService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.concurrent.TimeUnit;

// ƒê·ªãnh nghƒ©a ƒë√¢y l√† m·ªôt REST API controller (thay v√¨ tr·∫£ v·ªÅ view th√¨ tr·∫£ v·ªÅ JSON, object)
@RestController
// Cho ph√©p c√°c request t·ª´ domain kh√°c (cross-origin), c·∫ßn thi·∫øt khi FE v√† BE ch·∫°y tr√™n 2 c·ªïng/host kh√°c nhau
@CrossOrigin
// Mapping g·ªëc cho t·∫•t c·∫£ endpoint trong controller n√†y s·∫Ω b·∫Øt ƒë·∫ßu b·∫±ng /api/auth
@RequestMapping("/api/auth")
public class AuthController {

    // T·ª± ƒë·ªông inject AuthenticationManager (c·ªßa Spring Security) ƒë·ªÉ th·ª±c hi·ªán vi·ªác x√°c th·ª±c user
    @Autowired
    AuthenticationManager authenticationManager;

    // Service x·ª≠ l√Ω logic ƒëƒÉng k√Ω t√†i kho·∫£n
    @Autowired
    RegistrationService registrationService;

    // Spring Security UserDetailsService, d√πng ƒë·ªÉ load th√¥ng tin user t·ª´ DB
    @Autowired
    UserDetailsService userDetailsService;

    // Helper class ƒë·ªÉ sinh/gia h·∫°n token JWT
    @Autowired
    JWTTokenHelper jwtTokenHelper;

    @Autowired
    OtpService otpService;

    @Autowired
    EmailService emailService;

    @Autowired
    RedisTemplate<String, String> redisTemplate;

    @Autowired
    UserDetailRepository userRepository;

    @Autowired
    PasswordEncoder passwordEncoder;

    // API login: nh·∫≠n th√¥ng tin ƒëƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ token n·∫øu th√†nh c√¥ng
    @PostMapping("/login")
    public ResponseEntity<UserToken> login(@RequestBody LoginRequest loginRequest){
        try{
            // T·∫°o ƒë·ªëi t∆∞·ª£ng Authentication ch∆∞a x√°c th·ª±c (ch·ªâ ch·ª©a username v√† password ng∆∞·ªùi d√πng nh·∫≠p v√†o)
            Authentication authentication = UsernamePasswordAuthenticationToken.unauthenticated(
                    loginRequest.getUserName(),
                    loginRequest.getPassword()
            );

            // Nh·ªù authenticationManager x√°c th·ª±c th√¥ng tin n√†y (so s√°nh v·ªõi DB, password encoder,‚Ä¶)
            Authentication authenticationResponse = this.authenticationManager.authenticate(authentication);

            // N·∫øu x√°c th·ª±c th√†nh c√¥ng
            if(authenticationResponse.isAuthenticated()){
                // L·∫•y th√¥ng tin user ƒë√£ x√°c th·ª±c ra
                User user = (User) authenticationResponse.getPrincipal();

                // Ki·ªÉm tra user c√≥ ƒë∆∞·ª£c k√≠ch ho·∫°t (enabled) hay ch∆∞a
                if(!user.isEnabled()) {
                    // N·∫øu ch∆∞a th√¨ t·ª´ ch·ªëi ƒëƒÉng nh·∫≠p
                    return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
                }

                // Sinh token JWT d·ª±a tr√™n email user
                String token = jwtTokenHelper.generateToken(user.getEmail());

                // G√≥i token v√†o object UserToken ƒë·ªÉ tr·∫£ v·ªÅ FE
                UserToken userToken = UserToken.builder().token(token).build();

                // Tr·∫£ v·ªÅ token v·ªõi status 200 OK
                return new ResponseEntity<>(userToken, HttpStatus.OK);
            }

        } catch (BadCredentialsException e) {
            // N·∫øu username ho·∫∑c password sai -> tr·∫£ v·ªÅ 401 Unauthorized
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
        }

        // N·∫øu c√≥ l·ªói kh√°c ho·∫∑c kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c
        return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
    }

    // API register: d√πng ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi
    @PostMapping("/register")
    public ResponseEntity<CodeResponse> register(@RequestBody RegistrationRequest request){
        // G·ªçi service ƒë·ªÉ x·ª≠ l√Ω t·∫°o t√†i kho·∫£n
        CodeResponse registrationResponse = registrationService.createUser(request);

        // Tr·∫£ v·ªÅ response v·ªõi code 200 n·∫øu th√†nh c√¥ng, c√≤n l·∫°i th√¨ 400 Bad Request
        return new ResponseEntity<>(registrationResponse,
                registrationResponse.getCode() == 200 ? HttpStatus.OK : HttpStatus.BAD_REQUEST);
    }

    // API verify: x√°c minh t√†i kho·∫£n qua m√£ code (th∆∞·ªùng g·ª≠i email)
    @PostMapping("/verifyOtp-register")
    public ResponseEntity<?> verifyCode(@RequestBody Map<String,String> map){
        String email = map.get("email");
        String otp = map.get("otp");
        boolean success = registrationService.verifyUser(email, otp);
        if (success) {
            return ResponseEntity.ok("User verified successfully!");
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body("The verification code is incorrect or expired.");
        }
    }

    @PostMapping("/forgot-password")
    public ResponseEntity<String> forgotPassword(@RequestBody ForgotPasswordRequest request) {
        String email = request.getEmail();
        System.out.println("Email nh·∫≠n ƒë∆∞·ª£c: " + email);
        User user = userRepository.findByEmail(email);
        System.out.println("User t√¨m th·∫•y: " + user);
        if (user == null) {
            return ResponseEntity.badRequest().body("Email kh√¥ng t·ªìn t·∫°i!");
        }

        // T·∫°o OTP
        String otp = otpService.generateOtp();
        
        // L∆∞u v√†o Redis ho·∫∑c DB t·∫°m
        redisTemplate.opsForValue().set("OTP:" + email, otp, 5, TimeUnit.MINUTES);

        // G·ª≠i OTP qua email
        emailService.sendEmail(email, "OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", "M√£ OTP c·ªßa b·∫°n l√†: " + otp);

        return ResponseEntity.ok("ƒê√£ g·ª≠i OTP t·ªõi email.");
    }

    @PostMapping("/verifyOtp-forgotPassword")
    public ResponseEntity<String> verifyOtp(@RequestBody VerifyOtpForgotPassword request) {
        String email = request.getEmail();
        String otp = request.getOtp();

        System.out.println("üëâ Email nh·∫≠n: " + request.getEmail());
        System.out.println("üëâ OTP nh·∫≠n: " + request.getOtp());

        String cachedOtp = redisTemplate.opsForValue().get("OTP:" + email);

        if (cachedOtp == null) {
            return ResponseEntity.badRequest().body("OTP ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i!");
        }
        if (!cachedOtp.equals(otp)) {
            return ResponseEntity.badRequest().body("OTP kh√¥ng h·ª£p l·ªá!");
        }
        redisTemplate.delete("OTP:" + email);

        return ResponseEntity.ok("X√°c th·ª±c OTP th√†nh c√¥ng!");
    }

    @PostMapping("/reset-password")
    public ResponseEntity<String> resetPassword(@RequestBody ResetPasswordRequest request) {
        String email = request.getEmail();
        String newPassword = request.getNewPassword();

        User user = userRepository.findByEmail(email);
        if (user == null) {
            throw new UsernameNotFoundException("User not found");
        }

        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);

        return ResponseEntity.ok("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
    }

    @PostMapping("/resend-otp")
    public ResponseEntity<String> resendOtp(@RequestBody ResendOtp request) {
        String email = request.getEmail();
        User user = userRepository.findByEmail(email);
        if (user == null) {
            return ResponseEntity.badRequest().body("Email kh√¥ng t·ªìn t·∫°i!");
        }

        // T·∫°o OTP m·ªõi
        String otp = otpService.generateOtp();

        // Ghi ƒë√® l·∫°i OTP trong Redis (5 ph√∫t)
        otpService.saveOtpAndUser(email, otp, "", 5);

        // G·ª≠i l·∫°i email
        emailService.sendEmail(email, "OTP x√°c th·ª±c l·∫°i", "M√£ OTP m·ªõi c·ªßa b·∫°n l√†: " + otp);

        return ResponseEntity.ok("ƒê√£ g·ª≠i l·∫°i OTP!");
    }

}
