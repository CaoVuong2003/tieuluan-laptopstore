package com.tieuluan.laptopstore.auth.services;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tieuluan.laptopstore.auth.dto.RedisUser;
import com.tieuluan.laptopstore.auth.dto.RegistrationRequest;
import com.tieuluan.laptopstore.auth.dto.RegistrationResponse;
import com.tieuluan.laptopstore.auth.entities.User;
import com.tieuluan.laptopstore.auth.repositories.UserDetailRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ServerErrorException;

/**
 * RegistrationService ch·ªãu tr√°ch nhi·ªám x·ª≠ l√Ω qu√° tr√¨nh ƒëƒÉng k√Ω v√† x√°c th·ª±c user.
 *
 * - createUser(RegistrationRequest request): 
 *   + Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a.
 *   + N·∫øu ch∆∞a, t·∫°o user m·ªõi (encode m·∫≠t kh·∫©u, g√°n provider=manual, generate m√£ x√°c th·ª±c, g√°n role m·∫∑c ƒë·ªãnh).
 *   + L∆∞u user v√†o DB, g·ª≠i email x√°c th·ª±c v√† tr·∫£ v·ªÅ RegistrationResponse.
 *
 * - verifyUser(String userName):
 *   + X√°c th·ª±c user d·ª±a tr√™n email (userName).
 *   + N·∫øu t·ªìn t·∫°i th√¨ b·∫≠t tr·∫°ng th√°i enabled = true v√† l∆∞u l·∫°i DB.
 */
@Service
public class RegistrationService {

    @Autowired
    private UserDetailRepository userDetailRepository;

    @Autowired
    private AuthorityService authorityService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private EmailService emailService;

    @Autowired
    private OtpService otpService;

    @Autowired
    private ObjectMapper objectMapper;

    public RegistrationResponse createUser(RegistrationRequest request) {
        User existing = userDetailRepository.findByEmail(request.getEmail());

        if (existing != null) {
            return RegistrationResponse.builder()
                    .code(400)
                    .message("Email already exist!")
                    .build();
        }

        try {
            User user = new User();
            user.setFirstName(request.getFirstName());
            user.setLastName(request.getLastName());
            user.setEmail(request.getEmail());
            user.setEnabled(false);
            user.setPassword(passwordEncoder.encode(request.getPassword()));
            user.setPhoneNumber(request.getPhoneNumber());
            user.setProvider("manual");


            System.out.println(user.getPassword()); // null n·∫øu kh√¥ng set tr∆∞·ªõc ƒë√≥
            System.out.println(user.getPhoneNumber()); // null n·∫øu kh√¥ng set tr∆∞·ªõc ƒë√≥

            // G√°n role ngay khi t·∫°o user
            user.setAuthorities(authorityService.getUserAuthority());

            //T·∫°o otp
            String otp = otpService.generateOtp();

            // T·∫°o RedisUser ƒë·ªÉ l∆∞u Redis
            RedisUser redisUser = new RedisUser();

            redisUser.setEmail(user.getEmail());
            redisUser.setPassword(user.getPassword()); // hashed
            redisUser.setFirstName(user.getFirstName());
            redisUser.setLastName(user.getLastName());
            redisUser.setPhoneNumber(user.getPhoneNumber());
            redisUser.setProvider(user.getProvider());

            // Chuy·ªÉn user sang JSON ƒë·ªÉ l∆∞u v√†o Redis
            String userJson = objectMapper.writeValueAsString(redisUser);

            // L∆∞u OTP + user t·∫°m v√†o Redis (5 ph√∫t)
            otpService.saveOtpAndUser(user.getEmail(), otp, userJson, 5);
            System.out.println("OTP for " + user.getEmail() + ": " + otp);
            
            // G·ª≠i email x√°c th·ª±c
            emailService.sendMail(user, otp);

            return RegistrationResponse.builder()
                    .code(200)
                    .message("User created!")
                    .build();

        } catch (Exception e) {
            e.printStackTrace();
            throw new ServerErrorException("Registration failed", e);
        }
    }

    public boolean verifyUser(String email, String otp) {
        String storedOtp = otpService.getOtp(email);
        System.out.println("üîπ storedOtp = " + storedOtp + " | inputOtp = " + otp);

        if (storedOtp == null) {
            System.out.println("‚ùå OTP expired or not found in Redis");
            return false;
        }

        if (!storedOtp.trim().equals(otp.trim())) {
            System.out.println("‚ùå OTP mismatch");
            return false;
        }

        try {
            String userJson = otpService.getTempUser(email);
            if (userJson == null) return false;

            // Chuy·ªÉn JSON sang RedisUser
            RedisUser redisUser = objectMapper.readValue(userJson, RedisUser.class);

            System.out.println("pass: "+redisUser.getPassword()); // null n·∫øu kh√¥ng set tr∆∞·ªõc ƒë√≥
            System.out.println("phone: "+redisUser.getPhoneNumber()); // null n·∫øu kh√¥ng set tr∆∞·ªõc ƒë√≥

            // L·∫•y user th·ª±c t·ª´ DB (ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i)
            User user = userDetailRepository.findByEmail(email);
            if (user == null) {
                user = new User();
                user.setEmail(redisUser.getEmail());
                user.setFirstName(redisUser.getFirstName());
                user.setLastName(redisUser.getLastName());
                user.setPassword(redisUser.getPassword());
                user.setPhoneNumber(redisUser.getPhoneNumber());
                user.setProvider(redisUser.getProvider());

                // G√°n role t·ª´ DB, kh√¥ng l·∫•y t·ª´ JSON
                user.setAuthorities(authorityService.getUserAuthority());
            }

            user.setEnabled(true);
            userDetailRepository.save(user); // gi·ªù Hibernate s·∫Ω kh√¥ng complain
            otpService.deleteOtpAndUser(email);

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

}
